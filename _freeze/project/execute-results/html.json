{
  "hash": "7fe590485eecef16efede2809516658e",
  "result": {
    "markdown": "---\ntitle: \"Project\"\ntoc: false\nnumber-sections: false\nsidebar: false\nformat: html\n---\n\nIf you are taking this course for graduate credit, you will need to complete a project. The grade for the project will count in place of the active engagement grade. The project is due on the last day of class. \n\nYou only need to complete this assignment if you are graduate student taking this course for credit, undergraduate students are not required to complete this assignment, but can do so for fun and I would be happy to check your work, but it will not count towards your grade.\n\nThis project will teach you how to use Python programming to solve a simple mathematical problem with some economic intution. The choice of programming language does not matter, but I chose Python since it's widely used in the industry and academia and most importantly it's open source and free.\n\nThere are two different assignments you can choose from. You only need to complete one of the three assignments. For each assignment, you need to know some basic Python programming and set up. So use the sidebar and go through the Python setup and basic programming tutorials. Once you are done, each of the excercises build on an example or problem we solbed in class, and shows you how to code that problem. Once you understand the code, you will need to modify it to solve a related but expanded problem to the original problem and perform the tasks outlined. \n\nThe assignments are as follows:\n\n1. **Gasoline or electric cars**: This assignment builds on the example we did in class where we used linear algebra to solve a supply and demand system. I will show how we can use the simple 1 good case to derive some comparative statics and then you are expected to extend this to a 2 good case with gasoline and electric cars.\n2. **Demand for goods**: This assignment builds on the example we did in class where we derived demand for goods given a utility function. I will show how we can use Python to solve for the demand of goods given the Cobb-Douglas utility function, you are then expected to extend this to a CES utility function and do some comparative statics.\n   \n\n### Exercise 1\n\nGasoline or electric cars. \n\nDemand for gasoline cars is a function of price of both.\n\n$$ Q^d_{g} = c_g - a_g P_{g} + b_g P_{e} $$\n$$ Q^d_{e} = c_e - a_e P_{e} + b_e P_{g} $$\n\nWhere $Q^d_{g}$ is the log of quantity demanded of gasoline cars, $Q^d_{e}$ is log of the quantity demanded of electric cars, $P_{g}$ is the log price of gasoline cars, and $P_{e}$ is the price of electric cars. $a_g$, $b_g$, $c_g$, $a_e$, $b_e$, and $c_e$ are some known parameters, say estimated from data. Here $a_g$ and $a_e$ are the price elasticities of demand for gasoline and electric cars, respectively. While, $b_g$ and $b_e$ are the cross price elasticities of demand for gasoline and electric cars, respectively ie. how the price of one good affects the demand for the other good.\n\nProducers can produce gasoline cars or electric cars. In the short run, they are constrained by the amount of capital they have, so if they want to produce more of one type of car, they have to produce less of the other.\n\n$$ Q^s_{g} = \\alpha_g K - \\beta_g Q^s_{e} $$\n$$ Q^s_{e} = \\alpha_e K - \\beta_e Q^s_{g} $$\n\n### Exercise 2\n\nConsider Example 1, we derived demand functions for good 1 and 2 given a utility function.\n\n$$ x_1^* = \\frac{\\alpha}{\\alpha + \\beta} \\frac{m}{p_1} $$\n\nAssume $\\beta = 1 - \\alpha$.\n\n$$ x_1^* = \\frac{\\alpha m}{p_1} $$\n$$ x_1^* = \\frac{(1-\\alpha) m}{p_1} $$\n\nNote that $m = p_1 x_1 + p_2 x_2$ is the budget constraint.\n\nDoes demand of good 1 depend on price of good 2?\n\nFor the following parameters $\\alpha = 0.5$,  $m = 100$, $p_1 = 5$, and $p_2 = 5$, calculate the demand for good 1 and good 2. Price same, both goods valued equally, so similar demand for both goods. Now what happens if you increase the price of good 2 to 10? Share of expenditure on goods same as determined by $\\alpha$, more weight in utility function to good 1, higher $\\alpha$, higher share spent on good 1.\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\nDemand for good 1: 4.0\nDemand for good 2: 16.0\n```\n:::\n:::\n\n\nNow let's say you wanted to plot demand for good 1 as a function of price of good 1.\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-display}\n![](project_files/figure-html/cell-3-output-1.png){width=585 height=429}\n:::\n:::\n\n\nNow instead of calculating this by hand, you can use Python to solve this problem. SO we didn't have expressions for x1 and x2, we calculated by hand. But we can use Python to solve this problem.\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\narray([ 9.99980564, 10.00019436])\n```\n:::\n:::\n\n\nThis so we can write a super function of all the parameters and then solve for the optimal values of x1 and x2.\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-stdout}\n```\nDemand for good 1: 9.999954926633306\nDemand for good 2: 10.000045073366694\n```\n:::\n:::\n\n\nNow again you can plot demand for each good as a function of it's price aka demand curve. And also see how this changes with income, shifts right. \n\n::: {.cell execution_count=5}\n\n::: {.cell-output .cell-output-display}\n![](project_files/figure-html/cell-6-output-1.png){width=593 height=429}\n:::\n:::\n\n\n# Exercise \n\nYour excercise is to use Python and plot the demand curve for good 1 and good 2 where the utility function is CES. In particular, the utility function is given by:\n$$ U(x_1, x_2) = \\left( \\alpha x_1^{\\rho} + (1 - \\alpha) x_2^{\\rho} \\right)^{1/\\rho} $$\n\nWhere $x_1$ and $x_2$ are the quantities of good 1 and good 2 consumed, respectively. $\\alpha$ is the share of expenditure on good 1, $\\rho$ is the elasticity of substitution between the two goods.\n\nModify the function `solve_demand` to solve for the demand of good 1 and good 2 given the utility function above. \n\nSet $\\alpha = 0.5$, $\\rho = 0.5$, $m = 100$, $p_1 = 5$, and $p_2 = 5$ first and see what you get. \n\n- Verify that the demand for good 1 and good 2 same as when using solve_demand function when rho very small ie. close to 0.001.\n- When rho really large (try a big number like 100), what happens to the demand for good 1 and good 2? Try a number close to 1 (like 0.95)\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-stdout}\n```\nDemand for good 1: 7.1\nDemand for good 2: 4.3\nDemand for good 1: 6.0\nDemand for good 2: 4.67\n```\n:::\n:::\n\n\nPlot x2 as a function of p2 and p1.\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![](project_files/figure-html/cell-8-output-1.png){width=589 height=429}\n:::\n:::\n\n\n",
    "supporting": [
      "project_files"
    ],
    "filters": [],
    "includes": {}
  }
}