{
  "hash": "4cd0233bb48f0e80fd5348acca436f1e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Tutorial 1: Basic Python Programming\"\nnav-sidebar: false\nfilters: [pyodide]\nfig-align: center\nfig-width: 4\nfig-height: 3\n---\n\n\n\n\nYou need to know some basic Python programming to complete the project. This tutorial will teach you these basics. If you are already familiar with Python, you can skip this tutorial and proceed to [Tutorial 2](tutorial2.qmd).\n\nIf you are looking for some additional resources to learn Python, [QuantEcon](https://quantecon.org) is a great resource for learning programming, with a focus on economics and finance. You can find their Python programming lectures [here](https://python-programming.quantecon.org/).\n\n## Introduction\n\nPython is a general purpose programming language, which is free and open source. Open source means that the code is available for anyone to use, modify, and distribute. \n\nPython, when installed, comes with a standard library that includes many modules and functions to perform common tasks. However, we often need to use additional *packages* to perform more specialized tasks. Some of the most commonly used packages for data analysis and scientific computing include:\n\n- **NumPy**: provides support for large, multi-dimensional arrays and matrices, along with a collection of mathematical functions to operate on these arrays.\n- **Pandas**: provides data structures and data analysis tools for working with structured data.\n- **Matplotlib**: provides enhanced functionality for creating plots.\n- **SciPy**: provides a collection of numerical algorithms and toolboxes to perform scientific computing tasks such as differentiation, intergration, optimization, etc.\n\n## Getting Started\n\nFor this project, you will use Google Colab, which is a free cloud service that allows you to write and execute Python code in your browser. \n\n<!-- Essentially, with Google Colab, you are using a remote server that already has Python installed. -->\n\nYou will write and execute your code in Colab notebooks, which are interactive documents that can contain both code and rich text elements (such as paragraphs, equations, figures, links, etc.). Colab notebooks have the file extension `.ipynb`. If you have used Jupyter notebooks before, note that Colab notebooks are just [Jupyter](https://jupyter.org) notebooks that are hosted by Colab.\n\nTo get started, follow these steps:\n\n1. Open your web browser and go to [Google Colab](https://colab.research.google.com).\n2. Sign in with your Google account.\n3. Create a new notebook by clicking on `File` -> `New notebook in drive`.\n4. You can now start writing and executing Python code in the notebook. To test it out, type `print('Hello!')` in a code cell and run it by clicking the play button or pressing `Shift + Enter`.\n5. Once you are done, you can save the notebook to your Google Drive or download it to your computer.\n\nAside: If you want to do some serious programming, you should install Python on your computer, which takes a bit more work. But since the focus of this class is not programming, Google Colab is sufficient for our purposes.\n\n#### Navigating this Tutorial\n\nSome of the code snippets in the tutorial are interactive, meaning you can run them and see the output right here. For these code snippets, you will see a `Run` button next to them. Click on the `Run` button to execute the code snippet. You can also modify the code and run it to see how the output changes for the interactive code snippets. Remember that once you refresh the page, the code will go back to its original state. Try it with the code snippet below by replacing `World` with your name.\n\n```{pyodide-python}\nprint('Hello, World!')\n```\n\nYou can also copy the code to a Google Colab notebook and play around with it there. \n\n## Python Basics\n\n### Importing libraries\n\nIn Python, you can import libraries using the `import` statement. For example, to import the `numpy` library and then use `sqrt` function from it, you can do the following:\n\n::: {#c62e3b83 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy\nnumpy.sqrt(25)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n5.0\n```\n:::\n:::\n\n\nHowever, it is common to import libraries with an alias to make the code more readable. For example, you can import `numpy` as `np`, which is a common convention, and then use the `sqrt` function as follows:\n\n::: {#8b09915d .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nnp.sqrt(25)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n5.0\n```\n:::\n:::\n\n\n### Data types and variables\n\nPython has several built-in data types, including integers, floats, booleans, strings, and lists. You can assign values to variables using the `=` operator. Python will automatically infer the data type based on the value assigned to the variable.\n\nFor instance, you can assign the integer value of 1 to a variable `x` as follows:\n\n::: {#fe298bc0 .cell execution_count=3}\n``` {.python .cell-code}\nx = 1\n```\n:::\n\n\nTo assign a boolean value to a variable:\n\n::: {#666b0f10 .cell execution_count=4}\n``` {.python .cell-code}\nx = True\n```\n:::\n\n\nSimilarly, to assign a string value:\n\n::: {#2718ad26 .cell execution_count=5}\n``` {.python .cell-code}\nx = 'Hello'\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n'Hello'\n```\n:::\n:::\n\n\nNote that in the above code, when you add `x`, it will print the value of `x`.\n\nTo create a list, we can use square brackets `[]` as follows:\n\n::: {#ebc5c4e4 .cell execution_count=6}\n``` {.python .cell-code}\nx = [1, 1.1, 'Hello', True]\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n[1, 1.1, 'Hello', True]\n```\n:::\n:::\n\n\nLists can contain elements of different data types. You can access elements of a list using their index. Python uses zero-based indexing, meaning the first element of the list has an index of 0.\n\n```{pyodide-python}\nx = [1, 1.1, 'Hello', True]\nprint('1st element:', x[0])\nprint('3rd element:', x[2])\n```\n\n### Functions\n\nPython has a number of built-in functions that are available without import. For example, the `print` function is used to display output. Some other built-in functions include `len`, `max`, `min`, `sum`, etc. You can try these out in the code cell below:\n\n```{pyodide-python}\nx = [0, 1, 2, 3, 4]\nsum(x)\n```\n\nWe also saw that if built-in functions are not sufficient, we can import libraries and use functions from them (e.g., `numpy.sqrt`).\n\nHowever, sometimes we need to define our own functions. We can define a function using the `def` keyword followed by the function name and the arguments in parentheses. The function body is indented and can contain multiple lines of code. Here is an example of a simple function that returns the square of a number:\n\n```{pyodide-python}\ndef square(x):\n    return x**2\n\nsquare(5)\n```\n\nNote that in Python, `**` is used for exponentiation. \n\n*Exercise*: Define a function `add` that takes two arguments `x` and `y` and returns their sum. Test the function by calling it with `x=3` and `y=4`.\n\n### NumPy Arrays\n\nNumPy is a popular Python library for numerical computing. It provides support for large, multi-dimensional arrays and matrices, along with a collection of mathematical functions to operate on these arrays.\n\nThe most important data structure in NumPy is the `ndarray`, which is a multi-dimensional array. You can create a NumPy array from a Python list using the `np.array` function. For example:\n\n```{pyodide-python}\nimport numpy as np\nx = np.array([0, 1, 2, 3, 4])\nx\n```\n\nNumPy arrays are similar to lists but must contain elements that are either numeric or boolean. You can perform element-wise operations on NumPy arrays, which is not possible with Python lists. For example, you can square all elements of the NumPy array defined above as follows:\n\n```{pyodide-python}\nx**2\n```\n\nSometimes it can be useful to create a grid of evenly spaced numbers. You can do this using the `np.linspace` function, which takes the start, end, and number of points as arguments. For example, to create an array of 5 numbers between 0 and 1:\n\n::: {#dbe34d19 .cell execution_count=7}\n``` {.python .cell-code}\nnp.linspace(0, 1, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\narray([0.  , 0.25, 0.5 , 0.75, 1.  ])\n```\n:::\n:::\n\n\n### Plots \n\nWe will use the `matplotlib` library to create plots. To do so, we first need to import the `pyplot` module from `matplotlib`. Then we can use the `plot` function to create a simple line plot.\n\nHere is an example of creating a plot of $y = x^3$ for $x$ between 0 and 5:\n\n::: {#363c9e9f .cell execution_count=8}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nx = np.linspace(0, 5, 100)\ny = x**3\nplt.plot(x, y)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](tutorial1_files/figure-html/cell-9-output-1.png){width=352 height=263}\n:::\n:::\n\n\n`plt.plot(x, y)` creates a line plot of `y` against `x`. `plt.show()` displays the plot.\n\nNow what if we wanted to add another line for $z = x^3$ to the same plot? We can do this by calling the `plot` function again before calling `show`. The code below implements this and also adds a legend and labels to the plot.\n\n::: {#7a349106 .cell execution_count=9}\n``` {.python .cell-code}\nz = x**2\nplt.plot(x, y, label='y = x^3')\nplt.plot(x, z, label='z = x^2')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](tutorial1_files/figure-html/cell-10-output-1.png){width=370 height=282}\n:::\n:::\n\n\n",
    "supporting": [
      "tutorial1_files"
    ],
    "filters": [],
    "includes": {}
  }
}